{"version":3,"sources":["components/chat/userProfile/comms/comms.js","components/chat/toolbar/toolbar.js","components/chat/userProfile/categoriesPanel/ChannelsCategory/CategoryList/channelItem/channelItem.js","components/chat/userProfile/categoriesPanel/ChannelsCategory/CategoryList/categoryList.js","components/chat/userProfile/categoriesPanel/ChannelsCategory/channelsCategory.js","components/chat/userProfile/categoriesPanel/OnlineUsersCategory/UserList/userItem/userItem.js","components/chat/userProfile/categoriesPanel/OnlineUsersCategory/UserList/userList.js","components/chat/userProfile/categoriesPanel/OnlineUsersCategory/onlineUsersCategory.js","components/chat/userProfile/categoriesPanel/categoriesPanel.js","components/chat/userProfile/chatView/chatInput/chatInput.js","components/chat/userProfile/chatView/channelMessages/messageItem/messageItem.js","components/chat/userProfile/chatView/channelMessages/channelMessages.js","components/chat/userProfile/chatView/chatView.js","components/chat/userProfile/signout/signout.js","components/chat/userProfile/userProfile.js"],"names":["comms","username","url","onMsgReceived","socket","io","query","on","count","console","log","concat","users","user","userId","msg","join","data","emit","JSON","stringify","response","leave","sendGroupMsg","channel","sendPrivateMsg","sendTo","close","Toolbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","logoutImgSrc","env","routePath","channelsViewImgSrc","react_default","a","createElement","className","id","onClick","toggleChannelsDisplay","src","alt","signout","PureComponent","ChannelItem","CategoryList","Fragment","category","onChannelSelect","channelList","map","channelItem","key","ChannelsCategory","_ref","allChannels","allChannelRefs","categoryList","displayCategoryTitle","channelRef","UserItem","data-socketid","UserList","onUserSelect","keys","userList","userItem","socketId","OnlineUsersCategory","UserList_userList","CategoriesPanel","channelsCategory","onlineUsersCategory","allOnlineUsers","ChatInput","state","input","inputRef","React","createRef","onChange","bind","assertThisInitialized","onSubmit","current","focus","e","setState","target","value","preventDefault","test","name","text","timestamp","Date","toUTCString","sendNewMsg","type","placeholder","ref","ChatInputContext","authenticationContext","Consumer","isUserAuthenticated","chatInput_ChatInput","assign","MessageItem","ChannelMessages","scrollbarRef","scrollTop","scrollHeight","messages","index","messageItem","Component","ChatView","channelInfo","channelMessages","chatInput","SigningOut","Signout","isSignoutComplete","_this2","setTimeout","Redirect","to","signout_SigningOut","UserProfile","allChannelData","Groups","general","random","listenHereGuy","PMs","Jerry","BirdPerson","Online Users","addNewMsg","createChannel","deleteChannel","addMsgToChannel","updateSelectedChannelMessages","updateAllChannels","updateOnlineUsers","socketSetup","sendMsgToServer","userSignout","isSigningOut","areChannelsDisplayed","selectedChannel","onlineUsers","currentTarget","newCategory","replace","newChannel","getAttribute","length","undefined","push","_this$state$selectedC","objectSpread","isGroupMsg","appServer","applicationServer","parse","updatedOnlineUsers","prevState","signout_signout","toolbar","categoriesPanel","chatView","UserProfileContext","userProfile_UserProfile"],"mappings":"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","file":"static/js/5.f31c2044.chunk.js","sourcesContent":["import io from 'socket.io-client';\r\n\r\nfunction comms(username, url, onMsgReceived) {\r\n  const socket = io(url, {\r\n    query: {\r\n      username: username\r\n    }\r\n  });\r\n\r\n  // events listening on here\r\n  socket.on('users.count', count =>\r\n    console.log(`current users online: ${count}\\n`)\r\n  );\r\n\r\n  // object of all users containing each socket.id & username - received on initial server connection\r\n  socket.on('users.all-online', users => {\r\n    onMsgReceived('all online users', users); // sends users to userProfile to update onlineUsers state\r\n  });\r\n\r\n  socket.on('users.add-online-user', user => {\r\n    onMsgReceived('add online user', user);\r\n  });\r\n\r\n  socket.on('users.remove-online-user', userId => {\r\n    onMsgReceived('remove online user', userId);\r\n  });\r\n\r\n  // user received a message from a group they're subscribed to\r\n  socket.on('user.receive-group-msg', msg => {\r\n    onMsgReceived('new group message', msg); // adds message to group's channel\r\n  });\r\n\r\n  // user received a private message from an online user\r\n  socket.on('user.receive-private-msg', msg => {\r\n    onMsgReceived('new private message', msg); // adds message to PMs\r\n  });\r\n\r\n  // returns functions available for client\r\n  return {\r\n    // \"data\" is an array of channels (rooms) that the socket will join on the server\r\n    join: function(data) {\r\n      socket.emit('user.join-channels', JSON.stringify(data), function(\r\n        response\r\n      ) {\r\n        console.log(`user.join-channels response: ${response}\\n`);\r\n      });\r\n    },\r\n\r\n    // \"data\" is an array of channels (rooms) that the socket will leave on the server\r\n    leave: function(data) {\r\n      socket.emit('user.leave-channels', JSON.stringify(data), function(\r\n        response\r\n      ) {\r\n        console.log(`user.leave-channels response: ${response}\\n`);\r\n      });\r\n    },\r\n\r\n    // user sending message to a group - the 'channel' part isn't serialized because it's for the server\r\n    sendGroupMsg: function(data) {\r\n      socket.emit('user.send-group-msg', {\r\n        channel: data.channel,\r\n        msg: JSON.stringify(data)\r\n      });\r\n    },\r\n\r\n    // user sending message to specific user\r\n    sendPrivateMsg: function(data) {\r\n      socket.emit('user.send-private-msg', {\r\n        sendTo: data.sendTo,\r\n        msg: JSON.stringify(data.msg)\r\n      });\r\n    },\r\n\r\n    // manually disconnect socket - user signs out / navigates away from page\r\n    close: function() {\r\n      socket.close();\r\n    }\r\n  };\r\n}\r\n\r\nexport default comms;\r\n","import React, { PureComponent } from 'react';\r\nimport env from '../../../env';\r\n\r\nclass Toolbar extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.logoutImgSrc =\r\n      env.routePath + 'assets/svg/placeholder/logout-black.svg';\r\n\r\n    this.channelsViewImgSrc =\r\n      env.routePath + 'assets/svg/placeholder/list-view.svg';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"toolbar\">\r\n        <button id='channels-view-list-btn' onClick={this.props.toggleChannelsDisplay}>\r\n          <img src={this.channelsViewImgSrc} alt=\"toggle channel list\" />\r\n        </button>\r\n        \r\n        <span id=\"current-user\">{this.props.username}</span>\r\n\r\n        <button id=\"logout-btn\" className=\"link-to\" onClick={this.props.signout}>\r\n          <img src={this.logoutImgSrc} alt=\"user logout\" />\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Toolbar;\r\n","import React, { PureComponent } from 'react';\r\n\r\nclass ChannelItem extends PureComponent {\r\n  render() {\r\n    return (\r\n      <li id={this.props.channel} className=\"channel\">\r\n        {this.props.channel}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChannelItem;\r\n","import React, { PureComponent } from 'react';\r\nimport ChannelItem from './channelItem/channelItem';\r\n\r\nclass CategoryList extends PureComponent {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h3 id={`${this.props.category}-category`} className=\"category-title\">\r\n          {this.props.category}\r\n        </h3>\r\n\r\n        <ul\r\n          id={`${this.props.category}-list`}\r\n          className=\"category-channels-list\"\r\n          onClick={this.props.onChannelSelect}\r\n        >\r\n          {this.props.channelList.map(channel => (\r\n            <ChannelItem key={channel} channel={channel} />\r\n          ))}\r\n        </ul>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CategoryList;\r\n","import React from 'react';\r\nimport CategoryList from './CategoryList/categoryList';\r\n\r\nconst ChannelsCategory = ({ allChannels, allChannelRefs, onChannelSelect }) => {\r\n  const Groups = 'Groups';\r\n  const PMs = 'PMs';\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"category-section-header\">Channels</h2>\r\n      <div className=\"category-section\">\r\n        <CategoryList\r\n          category={Groups}\r\n          displayCategoryTitle={true}\r\n          channelRef={allChannelRefs[Groups]}\r\n          onChannelSelect={onChannelSelect}\r\n          channelList={allChannels[Groups]}\r\n        />\r\n\r\n        <CategoryList\r\n          category={PMs}\r\n          displayCategoryTitle={true}\r\n          channelRef={allChannelRefs[PMs]}\r\n          onChannelSelect={onChannelSelect}\r\n          channelList={allChannels[PMs]}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChannelsCategory;\r\n","import React, { PureComponent } from 'react';\r\n\r\nclass UserItem extends PureComponent {\r\n  render() {\r\n    return (\r\n      <li\r\n        id={this.props.username}\r\n        data-socketid={this.props.userId}\r\n        className=\"channel\"\r\n      >\r\n        {this.props.username}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserItem;\r\n","import React, { PureComponent } from 'react';\r\nimport UserItem from './userItem/userItem';\r\n\r\nclass UserList extends PureComponent {\r\n  render() {\r\n    return (\r\n      <ul\r\n        id={'online-users-list'}\r\n        className=\"category-channels-list\"\r\n        onClick={this.props.onUserSelect}\r\n      >\r\n        {Object.keys(this.props.userList).map(user => (\r\n          <UserItem\r\n            key={user}\r\n            userId={this.props.userList[user].socketId}\r\n            username={this.props.userList[user].username}\r\n          />\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserList;\r\n","import React from 'react';\r\nimport UserList from './UserList/userList';\r\n\r\nconst OnlineUsersCategory = ({ channelRef, onUserSelect, userList }) => {\r\n  return (\r\n    <div>\r\n      <h2 className=\"category-section-header\">Online Users</h2>\r\n      <div className=\"category-section\">\r\n        <UserList\r\n          channelRef={channelRef}\r\n          onUserSelect={onUserSelect}\r\n          userList={userList}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OnlineUsersCategory;\r\n","import React, { PureComponent } from 'react';\r\nimport env from '../../../../env';\r\nimport ChannelsCategory from './ChannelsCategory/channelsCategory';\r\nimport OnlineUsersCategory from './OnlineUsersCategory/onlineUsersCategory';\r\n\r\nclass CategoriesPanel extends PureComponent {\r\n  render() {\r\n    return (\r\n      <section className=\"side-panel\">\r\n        <nav id=\"all-categories\" className=\"scrollbar\">\r\n          <ChannelsCategory\r\n            allChannels={this.props.allChannels}\r\n            allChannelRefs={this.props.allChannelRefs}\r\n            onChannelSelect={this.props.onChannelSelect}\r\n          />\r\n\r\n          <OnlineUsersCategory\r\n            channelRef={this.props.allChannelRefs['Online Users']}\r\n            onUserSelect={this.props.onChannelSelect}\r\n            userList={this.props.allOnlineUsers}\r\n          />\r\n        </nav>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CategoriesPanel;\r\n","import React, { PureComponent } from 'react';\r\nimport AuthenticationContext from '../../../../authentication/authenticationContext';\r\n\r\n// using pure component so if a message is received in the current channel, this component won't needlessly re-render\r\nclass ChatInput extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { input: '' };\r\n    this.inputRef = React.createRef();\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputRef.current.focus();\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ input: e.target.value });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const isMessageValid = /\\S+/; // only non-empty not-only space strings are valid\r\n\r\n    if (isMessageValid.test(this.state.input)) {\r\n      // sent to userProfile to append msg and send to server\r\n      const msg = {\r\n        category: this.props.category, // category msg is intended for\r\n        channel: this.props.name, // channel msg is intended for\r\n        username: this.props.username, // username of sender (current user)\r\n        text: this.state.input, // msg being sent\r\n        timestamp: new Date().toUTCString()\r\n      };\r\n\r\n      this.setState({ input: '' }); // clears inputfield\r\n      this.props.sendNewMsg(msg); // appends message & sends to server\r\n    } else {\r\n      console.log('invalid input');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"chat-input-container\">\r\n        <form id=\"chat-input-form\" onSubmit={this.onSubmit}>\r\n          <input\r\n            id=\"chat-inputfield\"\r\n            className=\"rounded-border\"\r\n            type=\"text\"\r\n            value={this.state.input}\r\n            placeholder={\r\n              'Say something ' +\r\n              (this.props.category === 'Groups' ? 'in' : 'to') +\r\n              ` #${this.props.name}`\r\n            }\r\n            onChange={this.onChange}\r\n            ref={this.inputRef}\r\n          />\r\n\r\n          <img\r\n            className=\"chat-submit\"\r\n            src=\"./assets/svg/placeholder/round-arrow.svg\"\r\n            alt=\"send button\"\r\n            onClick={this.onSubmit}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst ChatInputContext = props => {\r\n  return (\r\n    <AuthenticationContext.Consumer>\r\n      {({ isUserAuthenticated }) => (\r\n        <ChatInput {...props} username={isUserAuthenticated.username} />\r\n      )}\r\n    </AuthenticationContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default ChatInputContext;\r\n","import React, { PureComponent } from 'react';\r\n\r\nclass MessageItem extends PureComponent {\r\n  render() {\r\n    return (\r\n      <li className=\"channel-msg\">\r\n        <img\r\n          className=\"avatar\"\r\n          src=\"./assets/svg/user-icon.svg\"\r\n          alt=\"user avatar\"\r\n        />\r\n        <div className=\"msg-container\">\r\n          <div>\r\n            <span className=\"msg username\">{this.props.msg.username}</span>\r\n            <span className=\"msg timestamp\">{this.props.msg.timestamp}</span>\r\n          </div>\r\n          <p className=\"msg text\">{this.props.msg.text}</p>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MessageItem;\r\n","import React, { Component } from 'react';\r\nimport MessageItem from './messageItem/messageItem';\r\n\r\nclass ChannelMessages extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // used to scroll to the bottom of the message view when a new message is added\r\n    this.scrollbarRef = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // scroll to bottom of message view\r\n    this.scrollbarRef.current.scrollTop = this.scrollbarRef.current.scrollHeight;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"channel-messages-container\"\r\n        className=\"scrollbar\"\r\n        ref={this.scrollbarRef}\r\n      >\r\n        <ul id=\"channel-messages-list\">\r\n          {this.props.messages.map((msg, index) => (\r\n            <MessageItem key={index} msg={msg} />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChannelMessages;\r\n","import React from 'react';\r\nimport ChatInput from './chatInput/chatInput';\r\nimport ChannelMessages from './channelMessages/channelMessages';\r\n\r\nconst ChatView = ({ channelInfo, sendNewMsg }) => {    \r\n  return (\r\n    <main id='chat-view'>\r\n      <div id='channel-title'>\r\n        <h1>{`#${channelInfo.name}`}</h1>\r\n      </div>\r\n\r\n      <ChannelMessages messages={channelInfo.messages} />\r\n      <ChatInput category={channelInfo.category} name={channelInfo.name} sendNewMsg={sendNewMsg} />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default ChatView;","import React, { PureComponent } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport env from '../../../../env';\r\n\r\nconst SigningOut = () => {\r\n  return (\r\n    <section className=\"wrapper center\">\r\n      <h1>Signing out...</h1>\r\n    </section>\r\n  );\r\n};\r\n\r\nclass Signout extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // once true, user's login data has been removed and they're redirected to the homepage\r\n    this.state = { isSignoutComplete: false };\r\n  }\r\n\r\n  // displays \"signing out\" screen for two seconds before redirect\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState({ isSignoutComplete: true });\r\n    }, 2000);\r\n  }\r\n\r\n  render() {\r\n    return this.state.isSignoutComplete ? (\r\n      <Redirect to={env.routePath} />\r\n    ) : (\r\n      <SigningOut />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signout;\r\n","import React, { Component } from 'react';\r\nimport comms from './comms/comms';\r\nimport AuthenticationContext from '../../authentication/authenticationContext';\r\nimport env from '../../../env';\r\nimport Toolbar from '../toolbar/toolbar';\r\nimport CategoriesPanel from './categoriesPanel/categoriesPanel';\r\nimport ChatView from './chatView/chatView';\r\nimport Signout from './signout/signout';\r\n\r\nclass UserProfile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // stores all channel categories --> channels (within category) --> messages (within channel)\r\n    this.allChannelData = {\r\n      Groups: {\r\n        general: [\r\n          // default channel (displayed on first chat-view render). all users subscribed to this on connection\r\n          {\r\n            // test message\r\n            username: 'BirdPerson',\r\n            text: 'In bird culture, this is considered a dick move',\r\n            timestamp: new Date().toUTCString()\r\n          },\r\n\r\n          {\r\n            // test message\r\n            username: 'Morty',\r\n            text: 'Ah jeez!',\r\n            timestamp: new Date().toUTCString()\r\n          }\r\n        ],\r\n\r\n        random: [\r\n          // all users subscribed to this on connection\r\n          {\r\n            // test message\r\n            username: 'ThatOneGuy',\r\n            text: 'Ayyyyy! ',\r\n            timestamp: new Date().toUTCString()\r\n          }\r\n        ],\r\n\r\n        listenHereGuy: [] // testing - user defined group\r\n      },\r\n\r\n      PMs: {\r\n        Jerry: [\r\n          {\r\n            username: 'Jerry',\r\n            text: 'Is this thing on?',\r\n            timestamp: new Date().toUTCString()\r\n          }\r\n        ],\r\n\r\n        BirdPerson: [\r\n          {\r\n            username: 'BirdPerson',\r\n            text:\r\n              'You appear to be dying. I will make efforts to prevent this, but can promise nothing.',\r\n            timestamp: new Date().toUTCString()\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    // currently not being used. May use this for imperative animation, but might just move to css\r\n    this.allChannelRefs = {\r\n      Groups: React.createRef(),\r\n      PMs: React.createRef(),\r\n      'Online Users': React.createRef()\r\n    };\r\n\r\n    // channel clicked in categoriesPanel\r\n    this.onChannelSelect = this.onChannelSelect.bind(this);\r\n\r\n    // when user sends or receives a message, this appends it to its channel messages\r\n    this.addNewMsg = this.addNewMsg.bind(this);\r\n\r\n    /* creates a new channel if the user creates a new channel or receives a message \r\n           on a channel that isn't stored in this.allMessages */\r\n    this.createChannel = this.createChannel.bind(this);\r\n\r\n    // deletes the current channel & updates allChannels state, given the category and channel name\r\n    this.deleteChannel = this.deleteChannel.bind(this);\r\n\r\n    // adds the new message to the specified channel\r\n    this.addMsgToChannel = this.addMsgToChannel.bind(this);\r\n\r\n    /* once a new message is added to allChannelData[category][channel],\r\n         this checks if the state for the selected channel's messages needs to update */\r\n    this.updateSelectedChannelMessages = this.updateSelectedChannelMessages.bind(\r\n      this\r\n    );\r\n\r\n    // updates the allChannels state when a new channel is added\r\n    this.updateAllChannels = this.updateAllChannels.bind(this);\r\n\r\n    // updates the current onlineUsers state when a user connects, disconnects, or when you initially get the user list\r\n    this.updateOnlineUsers = this.updateOnlineUsers.bind(this);\r\n\r\n    // socket.IO connection with the application server\r\n    this.socket = null;\r\n\r\n    // socket.IO connection setup\r\n    this.socketSetup = this.socketSetup.bind(this);\r\n\r\n    // appends new message from user to list, then sends to server\r\n    this.sendMsgToServer = this.sendMsgToServer.bind(this);\r\n\r\n    // msg received from server - either from a group or a specific user\r\n    this.onMsgReceived = this.onMsgReceived.bind(this);\r\n\r\n    // on user signout, deletes the authentication data & displays <SigningOut />\r\n    this.userSignout = this.userSignout.bind(this);\r\n\r\n    //* toggles displaying all the chat channels\r\n    this.toggleChannelsDisplay = this.toggleChannelsDisplay.bind(this);\r\n\r\n    this.state = {\r\n      isSigningOut: false, // determines if the sign out screen is displayed\r\n\r\n      //* determines if all channels are being displayed () - either as a sidepanel or\r\n      //* fullscreen depending on the screen width\r\n      areChannelsDisplayed: false,\r\n\r\n      selectedChannel: {\r\n        // info about selected channel (displayed in chatView)\r\n        category: 'Groups', // category channel data exists: can be either \"Groups\" or \"PMs\"\r\n        name: 'general', // name of selected channel\r\n        messages: this.allChannelData['Groups']['general'] // messages from selected channel\r\n      },\r\n\r\n      allChannels: {\r\n        // all channels for each of the two groups\r\n        Groups: Object.keys(this.allChannelData['Groups']),\r\n        PMs: Object.keys(this.allChannelData['PMs'])\r\n      },\r\n\r\n      onlineUsers: {} // updated after initial socket connection\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.socketSetup();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.socket.close(); // disconnects from server\r\n  }\r\n\r\n  onChannelSelect(e) {\r\n    e.preventDefault();\r\n    console.log('onChannelSelect()');\r\n\r\n    // update selectedChannel state ONLY if a new channel is selected\r\n    if (\r\n      e.target.id !== this.state.selectedChannel.name &&\r\n      e.currentTarget.id !== e.target.id\r\n    ) {\r\n      let newCategory = e.currentTarget.id.replace('-list', ''); // category selected\r\n      let newChannel = e.target.id; // channel selected\r\n\r\n      console.log(`\\tcategory: ${newCategory}`);\r\n      console.log(`\\tchannel: ${newChannel}\\n`);\r\n\r\n      //  user selected the online users category, which is saved in the PMs category\r\n      if (newCategory === 'online-users') {\r\n        newCategory = 'PMs';\r\n\r\n        console.log(`\\tdata id: ${e.target.getAttribute('data-socketid')}\\n`);\r\n      }\r\n\r\n      // if no messages were sent / received on the current channel, remove it from the channel list\r\n      if (this.state.selectedChannel.messages.length === 0) {\r\n        this.deleteChannel(\r\n          this.state.selectedChannel.category,\r\n          this.state.selectedChannel.name\r\n        );\r\n      }\r\n\r\n      this.createChannel(newCategory, newChannel); // creates a new channel if one doesn't exist\r\n\r\n      const selectedChannel = {\r\n        category: newCategory,\r\n        name: newChannel,\r\n        messages: this.allChannelData[newCategory][newChannel]\r\n      };\r\n\r\n      this.setState({ selectedChannel });\r\n    } else {\r\n      console.log('same channel selected');\r\n    }\r\n  }\r\n\r\n  // adds new message to specified channel\r\n  addNewMsg(msg) {\r\n    const { category, channel } = msg; // channel the current message is intended for\r\n\r\n    this.createChannel(category, channel); // creates channel if it doesn't exist\r\n    this.addMsgToChannel(msg); //adds message to this.channelData[category][channel]\r\n    this.updateSelectedChannelMessages(channel); // updates selected channel's msgs ONLY if a new msg was added\r\n  }\r\n\r\n  // creates channel with no messages if it doesn't exist & updates allChannels state\r\n  createChannel(category, channel) {\r\n    if (this.allChannelData[category][channel] === undefined) {\r\n      //channel doesn't exist\r\n      this.allChannelData[category][channel] = []; // creates channel\r\n\r\n      this.updateAllChannels(category, channel); // updates allChannels state\r\n    }\r\n  }\r\n\r\n  // deletes the current channel & updates allChannels state, given the category and channel name\r\n  deleteChannel(category, channel) {\r\n    delete this.allChannelData[category][channel]; // deletes the specified channel\r\n    this.updateAllChannels(category); // updates the allChannel state\r\n  }\r\n\r\n  // appends new message to specified channel\r\n  addMsgToChannel(msg) {\r\n    this.allChannelData[msg.category][msg.channel].push({\r\n      username: msg.username,\r\n      text: msg.text,\r\n      timestamp: msg.timestamp\r\n    });\r\n  }\r\n\r\n  // updates selected channel messages state when a new message is added to the selected channel\r\n  updateSelectedChannelMessages(channel) {\r\n    if (channel === this.state.selectedChannel.name) {\r\n      // new msg from selected channel\r\n      const selectedChannel = this.state.selectedChannel;\r\n      const { category, name } = this.state.selectedChannel;\r\n      selectedChannel.messages = this.allChannelData[category][name]; // use new msg list\r\n\r\n      this.setState({ selectedChannel });\r\n    }\r\n  }\r\n\r\n  // updates the state of allChannels - called when a new channel is added or a channel is deleted\r\n  updateAllChannels(category) {\r\n    const allChannels = { ...this.state.allChannels }; // gets current allChannels state to modify\r\n\r\n    if (this.isGroupMsg(category)) {\r\n      // updating Groups category\r\n      allChannels['Groups'] = Object.keys(this.allChannelData['Groups']);\r\n    } else {\r\n      // updating PMs category\r\n      allChannels['PMs'] = Object.keys(this.allChannelData['PMs']);\r\n    }\r\n\r\n    this.setState({ allChannels });\r\n  }\r\n\r\n  updateOnlineUsers(users) {\r\n    const onlineUsers = { ...users };\r\n    this.setState({ onlineUsers });\r\n  }\r\n\r\n  isGroupMsg(category) {\r\n    if (category === 'Groups') {\r\n      // msg is for the Groups category\r\n      return true;\r\n    }\r\n\r\n    return false; // msg if for the PMs category\r\n  }\r\n\r\n  socketSetup() {\r\n    const appServer = env.applicationServer;\r\n    this.socket = comms(this.props.username, appServer, this.onMsgReceived);\r\n\r\n    // joins all the group channels initially in state\r\n    this.socket.join(this.state.allChannels.Groups);\r\n  }\r\n\r\n  sendMsgToServer(msg) {\r\n    this.addNewMsg(msg); // appends new message to channel's messages\r\n\r\n    // sends message to the server\r\n    // send to the specified room based on the msg here\r\n    console.log(`sendMsgToServer() msg: ${JSON.stringify(msg)}\\n`);\r\n\r\n    if (this.isGroupMsg(msg.category)) {\r\n      // send as group msg to server\r\n      this.socket.sendGroupMsg(msg);\r\n    } else {\r\n      // send as PM msg to server\r\n      // pulls the socketId of the user the message is being sent to for the server\r\n      const sendTo = this.state.onlineUsers[msg.channel];\r\n\r\n      if (sendTo) {\r\n        this.socket.sendPrivateMsg({ sendTo: sendTo.socketId, msg: msg });\r\n      } else {\r\n        console.log('user offline');\r\n      }\r\n    }\r\n  }\r\n\r\n  // received a message from the server\r\n  onMsgReceived(type, data) {\r\n    // new group message received\r\n    if (type === 'new group message') {\r\n      this.addNewMsg(JSON.parse(data));\r\n    }\r\n\r\n    // new private message received\r\n    else if (type === 'new private message') {\r\n      data = JSON.parse(data);\r\n      data.channel = data.username; // updates channel to user who sent message\r\n\r\n      this.addNewMsg(data);\r\n    }\r\n\r\n    // update all online users state - initial server connection\r\n    else if (type === 'all online users') {\r\n      this.updateOnlineUsers(data);\r\n    }\r\n\r\n    //  new user joined - user object sent\r\n    else if (type === 'add online user') {\r\n      const updatedOnlineUsers = this.state.onlineUsers;\r\n      updatedOnlineUsers[data.username] = data; // adds the new online user\r\n\r\n      this.updateOnlineUsers(updatedOnlineUsers); // updates onlineUsers state\r\n    }\r\n\r\n    // user disconnected - user id sent\r\n    else if (type === 'remove online user') {\r\n      const updatedOnlineUsers = this.state.onlineUsers;\r\n      delete updatedOnlineUsers[data]; // removes the disconnected user\r\n\r\n      this.updateOnlineUsers(updatedOnlineUsers); // updates onlineUsers state\r\n    }\r\n  }\r\n\r\n  userSignout() {\r\n    this.props.signout(); // deletes authentication data\r\n    this.setState({ isSigningOut: true }); // displays the signout screen, then redirects to homepage\r\n  }\r\n\r\n  toggleChannelsDisplay() {\r\n    console.log('toggleChannelsDisplay()');\r\n\r\n    this.setState(prevState => ({\r\n      areChannelsDisplayed: !prevState.areChannelsDisplayed\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return this.state.isSigningOut ? (\r\n      <Signout />\r\n    ) : (\r\n      <article id=\"profile\">\r\n        <Toolbar\r\n          username={this.props.username}\r\n          signout={this.userSignout}\r\n          toggleChannelsDisplay={this.toggleChannelsDisplay}\r\n        />\r\n\r\n        <div id=\"profile-view\">\r\n          {this.state.areChannelsDisplayed ? (\r\n            <CategoriesPanel\r\n              allChannelRefs={this.allChannelRefs}\r\n              allChannels={this.state.allChannels}\r\n              allOnlineUsers={this.state.onlineUsers}\r\n              onChannelSelect={this.onChannelSelect}\r\n            />\r\n          ) : null}\r\n\r\n          <ChatView\r\n            channelInfo={this.state.selectedChannel}\r\n            sendNewMsg={this.sendMsgToServer}\r\n          />\r\n        </div>\r\n      </article>\r\n    );\r\n  }\r\n}\r\n\r\nconst UserProfileContext = props => {\r\n  return (\r\n    <AuthenticationContext.Consumer>\r\n      {({ isUserAuthenticated, signout }) => (\r\n        <UserProfile\r\n          {...props}\r\n          username={isUserAuthenticated.username}\r\n          signout={signout}\r\n        />\r\n      )}\r\n    </AuthenticationContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default UserProfileContext;\r\n"],"sourceRoot":""}