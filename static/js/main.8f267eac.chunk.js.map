{"version":3,"sources":["components/urlContext/urlContext.js","components/authentication/authenticationContext.js","components/notification/notificationContext/notificationContext.js","components/authentication/cookies.js","components/homepage/homepage.js","components/notification/notification.js","App.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","UrlContext","n","React","createContext","production","basePath","AuthenticationContext","isUserAuthenticated","status","username","authenticate","signout","NotificationContext","isActive","msg","newNotification","getCookie","cname","arguments","length","undefined","cookieComponents","decodeURIComponent","document","cookie","split","name","nameRegExp","RegExp","i","test","substring","deleteCookie","concat","Homepage","react_default","a","createElement","authenticationContext","Consumer","_ref","urlContext","_ref2","id","className","Link","to","DisplayNotification","duration","type","style","animationDuration","Notification","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timerID","bind","assertThisInitialized","newNotificationSetup","previousNotificationActive","_this2","then","catch","err","console","error","_this3","setState","setTimeout","_this4","Promise","resolve","clearTimeout","notificationContext","Provider","value","children","notification_DisplayNotification","Component","CreateAccount","lazy","e","Login","VerifyUserProfile","NoMatch","App","log","JSON","stringify","notification","react","fallback","Switch","Route","exact","path","component","AppContext","App_App","assign","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFAAA,IAAAA,EAAAC,EAAA,GAEMC,EAFND,EAAAE,EAAAH,GAEmBI,EAAMC,cAAc,CACrCC,YAAY,EACZC,SAAU,KAGGL,uCCPf,IAAAF,EAAAC,EAAA,GAEMO,EAFNP,EAAAE,EAAAH,GAE8BI,EAAMC,cAAc,CAChDI,oBAAqB,CACnBC,QAAQ,EACRC,SAAU,IAGZC,aAAc,aACdC,QAAS,eAGIL,uCCZf,IAAAR,EAAAC,EAAA,GAGMa,EAHNb,EAAAE,EAAAH,GAG4BI,EAAMC,cAAc,CAC9CU,UAAU,EACVC,IAAK,GAELC,gBAAiB,eAGJH,6PCVR,SAASI,IAOd,IAPkD,IAA1BC,EAA0BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlB,iBAE1BG,EADgBC,mBAAmBC,SAASC,QACXC,MAAM,KACzCC,EAAOT,EAAQ,IACbU,EAAa,IAAIC,OAAOF,GAGrBG,EAAI,EAAGA,EAAIR,EAAiBF,OAAQU,IAE3C,GAAIF,EAAWG,KAAKT,EAAiBQ,IACnC,OAAOR,EAAiBQ,GAAGE,UAAUL,EAAKP,OAAS,GAiBlD,SAASa,IAAsC,IAAzBf,EAAyBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,gBAEnC,OADAK,SAASC,OAAT,GAAAS,OAAqBhB,EAArB,6CACOD,EAAUC,eCUJiB,EAlCE,WACf,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAsBC,SAAvB,KACG,SAAAC,GAAA,IAAGjC,EAAHiC,EAAGjC,oBAAH,OACC4B,EAAAC,EAAAC,cAACI,EAAA,EAAWF,SAAZ,KACG,SAAAG,GAAA,IAAGrC,EAAHqC,EAAGrC,SAAH,OACC8B,EAAAC,EAAAC,cAAA,QAAMM,GAAG,WAAWC,UAAU,gBAC5BT,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKO,UAAU,qBACbT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMD,UAAU,UAAUE,GAAE,GAAAb,OAAK5B,EAAL,mBAA5B,kBAGCE,EAAoBC,OACnB2B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMD,UAAU,UAAUE,GAAE,GAAAb,OAAK5B,EAAL,YAA5B,WAIA8B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CAAMD,UAAU,UAAUE,GAAE,GAAAb,OAAK5B,EAAL,UAA5B,UAMJ8B,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,mDCzBVU,EAAsB,SAAAP,GAAuC,IAApC3B,EAAoC2B,EAApC3B,SAAUC,EAA0B0B,EAA1B1B,IAAKkC,EAAqBR,EAArBQ,SAAUC,EAAWT,EAAXS,KACtD,OAAOpC,EACLsB,EAAAC,EAAAC,cAAA,KACEO,UAAS,gBAAAX,OAAkBgB,GAC3BC,MAAO,CAAEC,kBAAiB,GAAAlB,OAAKe,EAAL,QAEzBlC,GAED,MAgGSsC,cA5Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXhD,UAAU,EACVC,IAAK,GACLkC,SAAU,EACVC,KAAM,IAIRK,EAAKQ,QAAU,KAGfR,EAAKvC,gBAAkBuC,EAAKvC,gBAAgBgD,KAArBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAGvBA,EAAKW,qBAAuBX,EAAKW,qBAAqBF,KAA1BR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAG5BA,EAAKY,2BAA6BZ,EAAKY,2BAA2BH,KAAhCR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KApBjBA,+EAyBHxC,EAAKkC,GAAqB,IAAAmB,EAAAV,KAAXR,EAAW/B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACpCuC,KAAKS,6BACFE,KAAK,kBAAMD,EAAKF,qBAAqBnD,EAAKkC,EAAUC,KACpDoB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,kDAGXxD,EAAKkC,EAAUC,GAAM,IAAAwB,EAAAhB,KACxCA,KAAKiB,SAAS,CACZ7D,UAAU,EACVC,IAAKA,EACLkC,SAAUA,EACVC,KAAMA,IAIRQ,KAAKK,QAAUa,WAAW,WACxBF,EAAKC,SAAS,CACZ7D,UAAU,EACVC,IAAK,GACLkC,SAAU,EACVC,KAAM,MAEPD,wDAGwB,IAAA4B,EAAAnB,KAC3B,OAAO,IAAIoB,QAAQ,SAAAC,GACbF,EAAKf,MAAMhD,UAEbkE,aAAaH,EAAKd,SAClBc,EAAKd,QAAU,KAEfc,EAAKF,SACH,CACE7D,UAAU,GAEZ,WACEiE,OAIJA,uCAMJ,OACE3C,EAAAC,EAAAC,cAAC2C,EAAA,EAAoBC,SAArB,CACEC,MAAO,CACLrE,SAAU4C,KAAKI,MAAMhD,SACrBC,IAAK2C,KAAKI,MAAM/C,IAChBC,gBAAiB0C,KAAK1C,kBAGvB0C,KAAKJ,MAAM8B,SACZhD,EAAAC,EAAAC,cAAC+C,EAAD,CACEvE,SAAU4C,KAAKI,MAAMhD,SACrBC,IAAK2C,KAAKI,MAAM/C,IAChBkC,SAAUS,KAAKI,MAAMb,SACrBC,KAAMQ,KAAKI,MAAMZ,eAtFAoC,aCNrBC,SAAgBC,eAAK,kBACzBxF,EAAAyF,EAAA,GAAApB,KAAArE,EAAAgE,KAAA,aAEI0B,EAAQF,eAAK,kBAAMxF,EAAAyF,EAAA,GAAApB,KAAArE,EAAAgE,KAAA,YACnB2B,EAAoBH,eAAK,kBAC7BxF,EAAAyF,EAAA,GAAApB,KAAArE,EAAAgE,KAAA,YAEI4B,EAAUJ,eAAK,kBAAMxF,EAAAyF,EAAA,GAAApB,KAAArE,EAAAgE,KAAA,YAErB6B,cAKJ,SAAAA,EAAYvC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmC,GACjBtC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqC,GAAAhC,KAAAH,KAAMJ,IAGN,IAAM5C,EAAWO,EAAU,YAJV,OAMjBsC,EAAKO,MAAQ,CACXtD,oBAAqB,CACnBC,YAAqBY,IAAbX,EACRA,cAAuBW,IAAbX,EAAyB,GAAKA,IAK5C6C,EAAK5C,aAAe4C,EAAK5C,aAAaqD,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAIpBA,EAAK3C,QAAU2C,EAAK3C,QAAQoD,KAAbR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAlBEA,mFAsBjBiB,QAAQsB,IAAR,aAAA5D,OAAyB6D,KAAKC,UAAUtC,KAAKJ,MAAMhD,UAAnD,4CAGWI,GACXgD,KAAKiB,SAAS,CACZnE,oBAAqB,CACnBC,QAAQ,EACRC,SAAUA,uCAMduB,EAAa,SACbA,EAAa,YAEbyB,KAAKiB,SAAS,CACZnE,oBAAqB,CACnBC,QAAQ,EACRC,SAAU,uCAMd,OACE0B,EAAAC,EAAAC,cAAA,OAAKM,GAAG,OACNR,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAACC,EAAA,EAAsB2C,SAAvB,CACEC,MAAO,CACL3E,oBAAqBkD,KAAKI,MAAMtD,oBAChCG,aAAc+C,KAAK/C,aACnBC,QAAS8C,KAAK9C,UAGhBwB,EAAAC,EAAAC,cAAC4D,EAAA,SAAD,CAAUC,SAAU/D,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,KACEhE,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM7C,KAAKJ,MAAMhD,SAAUkG,UAAWrE,IACnDC,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CACEE,KAAI,GAAArE,OAAKwB,KAAKJ,MAAMhD,SAAhB,kBACJkG,UAAWjB,IAEbnD,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CAAOE,KAAI,GAAArE,OAAKwB,KAAKJ,MAAMhD,SAAhB,SAAiCkG,UAAWd,IACvDtD,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CACEE,KAAI,GAAArE,OAAKwB,KAAKJ,MAAMhD,SAAhB,WACJkG,UAAWb,IAGbvD,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CAAOG,UAAWZ,gBA3EhBN,aAsGHmB,MAjBf,SAAoBnD,GAKlB,OACElB,EAAAC,EAAAC,cAACI,EAAA,EAAWwC,SAAZ,CACEC,MAAO,CACL9E,YAPa,EAQbC,SANW,MASb8B,EAAAC,EAAAC,cAACoE,EAADlD,OAAAmD,OAAA,GAASrD,EAAT,CAAgBhD,SATH,SC9FCsG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL9E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,KACQ/E,EAAAC,EAAAC,cAAC8E,EAAD,OAER5F,SAAS6F,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,KAAK,SAAAoD,GACjCA,EAAaC","file":"static/js/main.8f267eac.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst UrlContext = React.createContext({\r\n  production: false,\r\n  basePath: ''\r\n});\r\n\r\nexport default UrlContext;\r\n","import React from 'react';\r\n\r\nconst AuthenticationContext = React.createContext({\r\n  isUserAuthenticated: {\r\n    status: false,\r\n    username: ''\r\n  },\r\n\r\n  authenticate: () => {},\r\n  signout: () => {}\r\n});\r\n\r\nexport default AuthenticationContext;\r\n","import React from 'react';\r\n\r\n// add a \"display type\" attribute so it can be used for request verification / errors as well as inputfield errors\r\nconst NotificationContext = React.createContext({\r\n  isActive: false, // determines if the notification is being displayed\r\n  msg: '', // notification message\r\n\r\n  newNotification: () => {}\r\n});\r\n\r\nexport default NotificationContext;\r\n","export function getCookie(cname = 'authentication') {\r\n  const decodedCookie = decodeURIComponent(document.cookie); //gets the cookie if it exists\r\n  const cookieComponents = decodedCookie.split(';'); //pieces of the cookie\r\n  let name = cname + '='; //name of cookie to get\r\n  const nameRegExp = new RegExp(name);\r\n\r\n  //searches for cookie\r\n  for (let i = 0; i < cookieComponents.length; i++) {\r\n    //cookie is found\r\n    if (nameRegExp.test(cookieComponents[i])) {\r\n      return cookieComponents[i].substring(name.length + 1); //returns the value for the cookie\r\n    }\r\n  }\r\n\r\n  return undefined; //cookie not found\r\n}\r\n\r\nexport function setCookie(cname = 'authenticated', cvalue = false) {\r\n  const path = '/';\r\n  const date = new Date(); //used to set the cookie expiration date\r\n  date.setHours(date.getHours() + 2); //new expiration date set for 2 hours\r\n  const expires = date.toUTCString();\r\n\r\n  cvalue = encodeURIComponent(cvalue);\r\n  document.cookie = `${cname}=${cvalue}; expires=${expires}; path=${path}`;\r\n}\r\n\r\nexport function deleteCookie(cname = 'authenticated') {\r\n  document.cookie = `${cname}=; expires=Thu, 01 Jan 1970 00:00:00 UTC;`;\r\n  return getCookie(cname);\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport AuthenticationContext from '../authentication/authenticationContext';\r\nimport UrlContext from '../urlContext/urlContext';\r\n\r\nconst Homepage = () => {\r\n  return (\r\n    <AuthenticationContext.Consumer>\r\n      {({ isUserAuthenticated }) => (\r\n        <UrlContext.Consumer>\r\n          {({ basePath }) => (\r\n            <main id=\"homepage\" className=\"wrapper main\">\r\n              <header>\r\n                <div className=\"row space-between\">\r\n                  <Link className=\"link-to\" to={`${basePath}create-account`}>\r\n                    Create Account\r\n                  </Link>\r\n                  {isUserAuthenticated.status ? (\r\n                    <Link className=\"link-to\" to={`${basePath}profile`}>\r\n                      Profile\r\n                    </Link>\r\n                  ) : (\r\n                    <Link className=\"link-to\" to={`${basePath}login`}>\r\n                      Login\r\n                    </Link>\r\n                  )}\r\n                </div>\r\n\r\n                <h1>Whisper chat</h1>\r\n                <p>App description here...</p>\r\n              </header>\r\n            </main>\r\n          )}\r\n        </UrlContext.Consumer>\r\n      )}\r\n    </AuthenticationContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n","import React, { Component } from 'react';\r\nimport NotificationContext from './notificationContext/notificationContext';\r\n\r\n// returns the notification msg if it's active, otherwise null\r\nconst DisplayNotification = ({ isActive, msg, duration, type }) => {\r\n  return isActive ? (\r\n    <p\r\n      className={`notification ${type}`}\r\n      style={{ animationDuration: `${duration}ms` }}\r\n    >\r\n      {msg}\r\n    </p>\r\n  ) : null;\r\n};\r\n\r\nclass Notification extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isActive: false, // determines if the notification is displayed\r\n      msg: '', // notification message to display\r\n      duration: 0, // how long the notification lasts in ms\r\n      type: '' // (optional) error/success will change the color to red or green, respectively\r\n    };\r\n\r\n    // timeout id (clears when a new ID is set if one is currently active)\r\n    this.timerID = null;\r\n\r\n    // creates the new notification\r\n    this.newNotification = this.newNotification.bind(this);\r\n\r\n    // setup for new notification\r\n    this.newNotificationSetup = this.newNotificationSetup.bind(this);\r\n\r\n    // the previous notification is still active and needs to be removed first\r\n    this.previousNotificationActive = this.previousNotificationActive.bind(\r\n      this\r\n    );\r\n  }\r\n\r\n  newNotification(msg, duration, type = '') {\r\n    this.previousNotificationActive()\r\n      .then(() => this.newNotificationSetup(msg, duration, type))\r\n      .catch(err => console.error(err));\r\n  }\r\n\r\n  newNotificationSetup(msg, duration, type) {\r\n    this.setState({\r\n      isActive: true,\r\n      msg: msg,\r\n      duration: duration,\r\n      type: type\r\n    });\r\n\r\n    // notification becomes inactive after the duration has elapsed\r\n    this.timerID = setTimeout(() => {\r\n      this.setState({\r\n        isActive: false,\r\n        msg: '',\r\n        duration: 0,\r\n        type: ''\r\n      });\r\n    }, duration);\r\n  }\r\n\r\n  previousNotificationActive() {\r\n    return new Promise(resolve => {\r\n      if (this.state.isActive) {\r\n        // previous notification still active\r\n        clearTimeout(this.timerID);\r\n        this.timerID = null;\r\n\r\n        this.setState(\r\n          {\r\n            isActive: false\r\n          },\r\n          () => {\r\n            resolve(); //clears old notification before adding new one\r\n          }\r\n        );\r\n      } else {\r\n        resolve(); // no notification currently active\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <NotificationContext.Provider\r\n        value={{\r\n          isActive: this.state.isActive,\r\n          msg: this.state.msg,\r\n          newNotification: this.newNotification\r\n        }}\r\n      >\r\n        {this.props.children}\r\n        <DisplayNotification\r\n          isActive={this.state.isActive}\r\n          msg={this.state.msg}\r\n          duration={this.state.duration}\r\n          type={this.state.type}\r\n        />\r\n      </NotificationContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Notification;\r\n","import React, { Component, lazy, Suspense } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport UrlContext from \"./components/urlContext/urlContext\";\r\nimport AuthenticationContext from \"./components/authentication/authenticationContext\";\r\nimport { getCookie, deleteCookie } from \"./components/authentication/cookies\";\r\nimport Homepage from \"./components/homepage/homepage\";\r\nimport Notification from \"./components/notification/notification\";\r\nimport \"./components/style/main.css\";\r\n\r\nconst CreateAccount = lazy(() =>\r\n  import(\"./components/createAccount/createAccount\")\r\n);\r\nconst Login = lazy(() => import(\"./components/login/login\"));\r\nconst VerifyUserProfile = lazy(() =>\r\n  import(\"./components/chat/verifyUserProfile\")\r\n);\r\nconst NoMatch = lazy(() => import(\"./components/noMatch\"));\r\n\r\nclass App extends Component {\r\n  /*setup cookie here, then render routes based on it\r\n    -if cookie exists and JWT isn't expired, go to profile page \r\n    -if cookie exists but JWT is expired, or it doesn't exist, go to homepage */\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //set state initially by getting cookie info if it exists\r\n    const username = getCookie(\"username\");\r\n\r\n    this.state = {\r\n      isUserAuthenticated: {\r\n        status: username === undefined ? false : true,\r\n        username: username === undefined ? \"\" : username\r\n      }\r\n    };\r\n\r\n    // called on successful login or account creation\r\n    this.authenticate = this.authenticate.bind(this);\r\n\r\n    /* deletes authentication cookie and redirects to homepage \r\n       (only available if user is logged in)  */\r\n    this.signout = this.signout.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(`basePath: ${JSON.stringify(this.props.basePath)}\\n`);\r\n  }\r\n\r\n  authenticate(username) {\r\n    this.setState({\r\n      isUserAuthenticated: {\r\n        status: true,\r\n        username: username\r\n      }\r\n    });\r\n  }\r\n\r\n  signout() {\r\n    deleteCookie(\"token\");\r\n    deleteCookie(\"username\");\r\n\r\n    this.setState({\r\n      isUserAuthenticated: {\r\n        status: false,\r\n        username: \"\"\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"app\">\r\n        <Notification>\r\n          <AuthenticationContext.Provider\r\n            value={{\r\n              isUserAuthenticated: this.state.isUserAuthenticated,\r\n              authenticate: this.authenticate,\r\n              signout: this.signout\r\n            }}\r\n          >\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Switch>\r\n                <Route exact path={this.props.basePath} component={Homepage} />\r\n                <Route\r\n                  path={`${this.props.basePath}create-account`}\r\n                  component={CreateAccount}\r\n                />\r\n                <Route path={`${this.props.basePath}login`} component={Login} />\r\n                <Route\r\n                  path={`${this.props.basePath}profile`}\r\n                  component={VerifyUserProfile}\r\n                />\r\n\r\n                <Route component={NoMatch} />\r\n              </Switch>\r\n            </Suspense>\r\n          </AuthenticationContext.Provider>\r\n        </Notification>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction AppContext(props) {\r\n  const production = true; // updates the url path based on if site is live\r\n  //const basePath = production ? \"/whisper-chat/\" : \"/\";\r\n  const basePath = '/';\r\n\r\n  return (\r\n    <UrlContext.Provider\r\n      value={{\r\n        production: production,\r\n        basePath: basePath\r\n      }}\r\n    >\r\n      <App {...props} basePath={basePath} />\r\n    </UrlContext.Provider>\r\n  );\r\n}\r\n\r\nexport default AppContext;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'; \r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n            <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}